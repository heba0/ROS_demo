// Generated by gencpp from file ecg_data/data_struct.msg
// DO NOT EDIT!


#ifndef ECG_DATA_MESSAGE_DATA_STRUCT_H
#define ECG_DATA_MESSAGE_DATA_STRUCT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ecg_data
{
template <class ContainerAllocator>
struct data_struct_
{
  typedef data_struct_<ContainerAllocator> Type;

  data_struct_()
    : signal_type()
    , project_id()
    , user_id()
    , time()
    , data(0.0)  {
    }
  data_struct_(const ContainerAllocator& _alloc)
    : signal_type(_alloc)
    , project_id(_alloc)
    , user_id(_alloc)
    , time()
    , data(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _signal_type_type;
  _signal_type_type signal_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _project_id_type;
  _project_id_type project_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _user_id_type;
  _user_id_type user_id;

   typedef ros::Time _time_type;
  _time_type time;

   typedef double _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ecg_data::data_struct_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ecg_data::data_struct_<ContainerAllocator> const> ConstPtr;

}; // struct data_struct_

typedef ::ecg_data::data_struct_<std::allocator<void> > data_struct;

typedef boost::shared_ptr< ::ecg_data::data_struct > data_structPtr;
typedef boost::shared_ptr< ::ecg_data::data_struct const> data_structConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ecg_data::data_struct_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ecg_data::data_struct_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ecg_data::data_struct_<ContainerAllocator1> & lhs, const ::ecg_data::data_struct_<ContainerAllocator2> & rhs)
{
  return lhs.signal_type == rhs.signal_type &&
    lhs.project_id == rhs.project_id &&
    lhs.user_id == rhs.user_id &&
    lhs.time == rhs.time &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ecg_data::data_struct_<ContainerAllocator1> & lhs, const ::ecg_data::data_struct_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ecg_data

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ecg_data::data_struct_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ecg_data::data_struct_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ecg_data::data_struct_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ecg_data::data_struct_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecg_data::data_struct_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecg_data::data_struct_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ecg_data::data_struct_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bebbd51a7e427939fe0d843092aefc83";
  }

  static const char* value(const ::ecg_data::data_struct_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbebbd51a7e427939ULL;
  static const uint64_t static_value2 = 0xfe0d843092aefc83ULL;
};

template<class ContainerAllocator>
struct DataType< ::ecg_data::data_struct_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecg_data/data_struct";
  }

  static const char* value(const ::ecg_data::data_struct_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ecg_data::data_struct_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string signal_type\n"
"string project_id \n"
"string user_id\n"
"time time \n"
"float64 data \n"
;
  }

  static const char* value(const ::ecg_data::data_struct_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ecg_data::data_struct_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signal_type);
      stream.next(m.project_id);
      stream.next(m.user_id);
      stream.next(m.time);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct data_struct_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ecg_data::data_struct_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ecg_data::data_struct_<ContainerAllocator>& v)
  {
    s << indent << "signal_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.signal_type);
    s << indent << "project_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.project_id);
    s << indent << "user_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.user_id);
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "data: ";
    Printer<double>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECG_DATA_MESSAGE_DATA_STRUCT_H
